(ns adl.to-reframe
  (:require [adl.utils :refer :all]
            [clojure.string :as s]
            [clj-time.core :as t]
            [clj-time.format :as f]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; adl.to-hugsql-queries: generate re-frame/re-com views.
;;;;
;;;; This program is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU General Public License
;;;; as published by the Free Software Foundation; either version 2
;;;; of the License, or (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
;;;; USA.
;;;;
;;;; Copyright (C) 2018 Simon Brooke
;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn file-header
  ([parent-name this-name extra-requires]
  (list 'ns (symbol (str parent-name ".views." this-name))
    (str "Re-frame views for " parent-name
         " auto-generated by [Application Description Language framework](https://github.com/simon-brooke/adl) at "
         (f/unparse (f/formatters :basic-date-time) (t/now)))
        (concat
         (list :require
              '[re-frame.core :refer [reg-sub subscribe dispatch]])
                extra-requires)))
  ([parent-name this-name]
   (file-header parent-name this-name '())))




(defn generate-form
  "Generate as re-frame this `form` taken from this `entity` of this `document`."
  [form entity application]
  (let [record @(subscribe [:record])
        errors @(subscribe [:errors])
        messages @(subscribe [:messages])
        properties (required-properties entity form)]
    (list
     'defn
     (symbol
      (s/join
       "-"
       (:name (:attrs entity))
       (:name (:attrs form))
       "-form-panel"))
     []
     (apply
      vector
      (remove
       nil?
       (list
        :div
        (or
         (:top (:content form))
         (:top (:content application)))
        (map #(list 'ui/error-panel %) errors)
        (map #(list 'ui/message-panel %) messages)
        [:h1 (:name (:attrs form))]
        [:div.container {:id "main-container"}
         (apply
          vector
          (list
           :div
           {}
           (map
            #(generate-widget % form entity)
            properties)))]
        (or
         (:foot (:content form))
         (:foot (:content application))))))
     )))

